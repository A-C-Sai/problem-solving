############################################################################################################
                                            Binary Trees
############################################################################################################

Deg(T) = 2
children = {0,1,2}

############################################
    Number of Binary Trees Using N Nodes
############################################

1. unlabeled nodes

    T(n) =  2nCn / (n+1) -----> catalan number
    T(n) = Sigma(1 to n)[T(i-1)*T(n-i)]

    # trees with max height = 2^(n-1)


2. labelled nodes

    T(n) =  [2nCn / (n+1)] * n!


############################################
      Height vs Nodes in Binary Trees
############################################

1. Given Height, # of Nodes:

    Min(n) = h+1
    Max(n) = 2^(h+1) - 1 ---> sum of the terms of G.P. series a(r^(k+1)-1) / (r-1) where a = 1 and r = 2

    h+1 <= n <= 2^(h+1) - 1

2. Given # of Nodes, height:

    Min(h) = log[2](n+1) - 1  
    Max(h) = n - 1

    log[2](n+1) - 1 <= h <= n - 1
    O(logn)                 O(n)


#################################################
    Internal vs External Nodes in Binary Tree
#################################################

deg(0) = deg(2) + 1



#################################################
              Strict Binary Tree
#################################################

childern = {0,2}


1. Given Height, # of Nodes:

    Min(n) = 2h+1
    Max(n) = 2^(h+1) - 1 

    2h+1 <= n <= 2^(h+1) - 1

2. Given # of Nodes, height:

    Min(h) = log[2](n+1) - 1  
    Max(h) = (n - 1) / 2

    log[2](n+1) - 1 <= h <= (n - 1)/2
    O(logn)                 O(n)


# External Nodes = # Internal Nodes + 1